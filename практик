#include 
"all_libraries.h"

class Human {

double height;

string eyes_color;
string name;
string

Last_name;
int energy;
bool soreThroat;
int cleanliness;
int mood;
int hunger;// 0 - full; 100 - hungry;
int* salaries_list;

public:

Human();
Human (double height, string eyes_color);
void SetHeight(double height);
double GetHeight() const;

void SetEyes_color(string eyes_color);
string GetEyes_color() const;

void SetName(string name);
string GetName() const;

void SetLastName(string last_name);
string GetLastName() const;

void SetEnergy(int energy);
int GetEnergy() const;

void SetSoreThroat (bool soreThroat);
bool GetSoreThroat() const;

void SetCleanliness(int cleanliness);
int GetCleanliness() const;

void SetMood(int mood);
int GetMood() const;

void SetHunger (int hunger);
int SetHunger() const;

void AddSalary(int);
int* GetSalary()_;


Human: : Human()
{
SetHeight(187);
SetEyes_color ("blue");
SetName("Sem");
SetLastName("Dep");
SetEnergy (10);
SetSoreThroat(0);
SetCleanliness (10);
SetMood (10) ;
SetHunger (10);
salaries_list = new int[12];
}



Human: : Human()
{
  cout <<"Object has been destroyed!\n";
  delete[] salaries_list;
}
void Human: : AddSalary(int salaries_list)
{
  // add 1 element to dynamic 1D-array
}
// think about state-safety
int* Human: :GetSalary()
{
return salaries_list;
}




public:
   /// <summary>
   /// method to set day of birth
   /// </ summary>
   /// <param name="day"></param>

   void
   SetDay(int day)
   {
     if (day > 0 && day <= 31) // TO DO: february 28-29, april june 30
    {
      this->day = day;
    }
    else
    {
     cout « "Invalid value!" « endl;
     throw "ERROR! \n" ;
    }
   }
    /// <summary>
    /// method to get the day of birth
    /// </summary>
    ///<returns>day</returns>
    int GetDay() const
   {
      return day;
   }
     ///<summary>
     /// method to set month of birth
     /// </ summary>
     /// <param name="month"></param>
void SetMonth(int month)


  /// <param name="month"></param>
  void SetMonth(int month)
  {
    if (month >= 1 && month <= 12)
    {
      this->month = month;
    }
    else
    {
      cout « "Invalid value!" « endl;
      throw "ERROR! \n";
     }
   }

     /// <summary>
     /// method to get the month of birth
     /// </summary>
     /// <returns>month</returns>
     int GetMonth() const
     {
       return month;
     }
     ///‹summary>
     ///method to set year of birth
     /// </summary>
     /// <param name="year"></param>
     void SetYear(int year)
    {
       this->year = year;
    }
     ///‹summary>
     /// method to get the year of birth
     /// </summary>
     ///<returns>year</returns>
    int GetYear) const
    {
      return year;
    }


  public:
    Student(): Student("Sam", "Dep", { 11, 9, 2001 }, { 4, 9, 2021 }){}

    Student(string name, string surname): Student("Sam", "Dep", { 11, 9, 2001 }, { 4, 9, 2021 }){}

    Student(string name, string surname, DateTime birthday, DateTime study_start)
    {
      SetName (name);
      SetSurname(surname);
      SetBirthday(birthday);
      SetStudyStart(study_start);
    }=



   // in which a SEPARATE NEW AREA OF MEMORY will be selected under all index fields
  Student(const Student& original)
   {
     cout << "student copy constructor \n";

     this->name = original.name;
     this->surname = original.surname;
     this->birthday = original.birthday;
     this-study_start = original.study_start;

   //an example of DEEP COPY
     this->hometask_rates_count = original.hometask_rates_count;
     this->practice_rates_count = original.practice_rates_count;
     this->exam_rates_count = original.exam_rates_count;

   //for pointer fields there will be a separate code that allocates new memory!!!!
     this->hometask_rates = new int[this->hometask_rates_count];
   // it is enough to allocate memory, and it is also necessary to initialize it!!!
     for (int i = 0; i < this->hometask_rates_count; i++)
     {
      this->hometask_rateslil = original.hometask_rates[il;
     }
   //for pointer fields there will be a separate code that allocates new memory!!!!
     this->practice_rates = new int[this->hometask_rates_count];
   // it is enough to allocate memory, and it is also necessary to initialize it!!!
     for (int i = 0; i < this-›practice_rates_count; i++)
     {
       this-›practice_rates[i] = original.practice_rates[i];
     }
   // for pointer fields there will be a separate code that allocates new memory!!!!
   this->exam_rates = new int[this->hometask_rates_count];
   // it is enough to allocate memory, and more is needed
  for (int i = 0; i < this->examrates_count; i++)
  {
   this->exam_ratesli] = original. exam_rates|il;
}
}





class Application {

private:
  static Application* instance;
  string title;

  Application()
  {
   title = "Title";
  }

public:
  static Application* GetInstance()
  {
   return instance;
  }

  void SetTitle(const string& title2)
  {
   title = title2;
  }
  void Random()
  {
   srand(time (NULL));
   int n = rand() % 100 + 1;
   cout << "Number:" << n << endl;
  }
  string GetTitle() const
  {
   return title;
  }
 }



 int main()
 {
  Logger: :GetInstance()-›Write("main started\n");
  Student original;
  Logger: :GetInstance()->Write("main ended\n");
 }




1: Main started
2: Student created
3: Main ended
4: Student destroyed
C: \Users \USER \source \repos\practice25.10\×64\Debug \practice25.10. exe (process 31264) exited with code 0.
To automatically close the console when debugging stops, enable Tools-Options-Debugging-Automatically close the consc
le when debugging stops

Press any key to close this window.…


main started

Student created
main ended

Student destroyed
main started

Student created
main ended

Student destroyed


class Logger
{
  static Logger* instance; // 1)private static pointer to a single instance of the class
  int log_count = 0; // how many times was the line written to the file
  string path = "C:/test/test.txt";


Student()
{
  Logger: :GetInstance()-›Write("Student created");
  SetName("Amaliia");
  SetSurname("Manko");
  SetBirthday({09, 07,2005 });
  SetStudyStart({ 01,09,2022 });
throwError();
}



Student (const Student& original)
{
   this->name = original.name;
   this-surname = original.surname;
   this->birthday = original.birthday;
   this-›study_start = original.study_start;
   this->hometask_rates_count = original.hometask_rates_count;
   this->hometask_rates = new int[this->hometask_rates_count];
   for (int i = 0; i < this->hometask_rates_count; i++)
  {
      this->hometask_rates[i] = original.hometask_rates[i];
  }
  throwError;
  Logger: :GetInstance)->Write("Student created");
}
~Student()
{
  if (hometask_rates != nullptr)
  { 
    delete[] hometask_rates;
    hometask_rates = nullptr;
  }
  Logger: :GetInstance()->Writel"Student destroyed");
}




Fraction operator + (const Fraction& left, const Fraction& right)
{
   Fraction result;
   result.SetNumerator(left.GetNumerator() * right.GetDenominator() + right.GetNumerator() * left.GetDenominator());
   result.SetDenominator(left.GetDenominator() * right.GetDenominator());
   return result;
}

Fraction operator - (const Fraction& left, const Fraction& right)
{
   Fraction result;
   result.SetNumerator(left.GetNumerator() * right.GetDenominator() - right.GetNumerator() * left.GetDenominator());
   result.SetDenominator(left.GetDenominator() * right.GetDenominator());
   return result;
}

Fraction operator * (const Fraction& left, const Fraction& right)
{
   Fraction result;
   result.SetNumerator(left.GetNumerator() * right. GetNumerator());
   result.SetDenominator(left.GetDenominator() * right.GetDenominator());
   return result;
}

Fraction operator / (const Fraction& left, const Fraction& right)
{
  if (right.GetNumerator() == 0) {
      throw "ERROR: Division by zero.";
   }
  Fraction result;
  result.SetNumerator(left.GetNumerator() * right.GetDenominator());
  result.SetDenominator(left.GetDenominator() * right.GetNumerator());
  return result;
}



bool operator < (const Fraction& left, const Fraction& right)
{
    return left.GetDecimal() < right.GetDecimal();
}

bool operator == (const Fraction& left, const Fraction& right)
{
    return left.GetDecimal() == right.GetDecimal();
}

bool operator != (const Fraction& left, const Fraction& right)
{
    return left.GetDecimal() != right.GetDecimal();
}


Fraction operator - (const Fraction& r)
{
  cout << "CLASS METHOD\n";
  Fraction result;
  result.numerator = numerator * r.denominator - r.numerator * denominator;
  result.denominator = denominator * r.denominator;
  return result;
}

Fraction operator * (const Fraction& r)
{
  cout << "CLASS METHOD\n";
  Fraction result;
  result.numerator = numerator * r.numerator;
  result.denominator = denominator * r.denominator;
  return result;
}

Fraction operator / (const Fraction& r)
{
  cout << "CLASS METHOD\n";
  Fraction result;
  result.numerator = numerator * r.denominator;
  result.denominator = denominator * r.numerator;
  return result;
}



}

DateTime(const DateTime& original)
{
    //cout << "DateTime copy constructor\n";
    this->day = original.day;
    this->month = original.month;
    this->year = original.year;
}

~DateTime(){
    //cout << "DateTime destructor\n";
}

void Print() const
{
   cout << "Date: " << day << "." << month << "." << year << endl;
 }

operator string() {
   return to_string(day) + "." + to_string(month) + "." + to_string(year);
 }
}

int main()
{
setlocale(0, "");

DateTime today (23, 12, 2023);
string textData = today;
cout << textData << "\n"; // 23.12.2023






int main()
{
    string name = "Amaliia";
    Student s = name; 
    s. PrintStudent;



int& operator [] (unsigned int index) {
    if (index == 0)return day;
    if (index == 1)return month;
    if (index == 2)return year;
    throw"Incorrect index \n";
}

Student (string value) {
   name = value;
} 




int main()
{
   DateTime today(23, 12, 2023);
   cout << today[0]; // 23
   cout << today[1]; // 12
   cout << today[2]; // 2023
   /*cout << today[3]; //Error
   cout << today[-1]; // Error*/

   today[0] = 24; // write access
   today.PrintO; // 24.12.2023



Student& operator=(const Student& original)
{
 if (this == original)
    return *this;
name = original.name;
surname = original.surname;
birthday = original.birthday;
study_start = original.study_start;

if (hometask_rates != nullptr)
   delete[] hometask_rates;
if (exam_rates != nullptr)
   delete[]exam_rates;
if (practice_rates != nullptr)
   delete[] practice_rates;

hometask_rates_count = original.hometask_rates_count;
exam_rates_count = original.exam_rates_count;
practice_rates_count = original.practice_rates_count;

if (hometask_rates_count > 0)
{
  hometask_rates = new int [hometask_rates_count];
  for (int i = 0; i < hometask_rates_count; i++)
      hometask_rates[i] = original.hometask_rates[i];
}
if (exam_rates_count > 0)
{
    exam_rates = new int[exam_rates_count];
    for (int i = 0; i < exam_rates_count; i++)
        exam_rates[i] = original.exam_rates[i];
}
if (practice_rates_count > 0)
{
    practice_rates = new int[practice_rates_count];
    for (int 1 = 0; 1 < practice_rates_count; i++)
         practice_rates[il = original.practice_rates[il;
}
return *this;
}





Group& operator=(const Group& original)
{
  if (this == original)
  {
    return *this;
  }
 
  if (group != nullptr)
      delete[] group;

  groupSize = original.groupSize;
  courseN = original.courseN;
  groupName = original.groupName;
  specialty = original.specialty;

  group = new Student [groupSize];
  for (int i = 0; i < this-›groupSize; i++)
       groupli] = original.group[i];

return *this;
}


{
   // cout « "DESTRUCTOR! \n" ;
  if (data != nullptr)
  {
     delete [] data;
     data = nullptr;
  }
}
int IndexOf(int value) const
{
   for (int i = 0; 1 < size; i++)
   {
      if (data[i] == value)
      {
         return i;
      }
  }
  return -1;
}

void Reverse()
{
   int start = 0;
   int end = size - 1;

   while (start < end)
  {
     int temp = datalstart;
     data[start] = data[end];
     data[end] = temp;

     start++;
     end--;
   }
 }
void SortAscO



void SortAsc()
 {
   if (size <= 1)
   {
    return;
   }
  for (int i = 0; 1 < size - 1; i++)
  {  
    for (int j = i + 1; j < size; j++)
     {
      if (data[j] < data[il)
       {
        data[i] = datal[i] + data[j];
        data[i] = datal[i] - data[j];
        data[i] = datal[i] - data[j];
      }
     }
    }
  }
}
private:
   void EnsureCapacity()
   {
     if (size < capacity)
    {
     return;
    }
capacity *= 2;




   int Pop()
   {
     if(!IsEmpty())
      {
          return ar[--index];
      }
      else
      {
        throw "Stack is empty!";
      }
   } 
   int Peek() const
   {
    if(!IsEmpty())
    {
      return ar[index - 11];
    }
    else
    {
      throw "Error";
    }
   }
  }
  int main()
  {
   Stack st; // create an "empty" stack
   // until the stack is full
   while (!st.IsFull())
      st.Push(rand() % 90 + 10); // add an element to the top of the stack
   //as long as there are any values ​​on the stack
   while (!st.IsEmpty())
      cout << st.Pop() << " "; // extract value and show on screen



int Peek() const
{
   if (!IsEmpty())
    {
      return ar[intex - 11;
    }
    else
    {
       throw "Error";
    }
 }
bool Contains(int value) const
{
  for (int i = 0; 1 < index; ++i)
  {
    if (ar[i] == value)
     {
       return true;
     }
  }
    return false;
}
int main()
{
   Stack st; // создаём "пустой" стек

   //И до тех пор, пока стек не заполнился
   while (Ist.IsFullO)
   st.Push (rand() % 90 + 10); // добавляем элемент на ве



    cout << st.Pop << " "; // извлечь значение и показать на экране

    if (st.Contains(5) == true) {
     cout « "True\n" ;
    }

    stack<int> st2; // створюємо стек для зберігання елементів типу int

    cout «< "додати 5 елементів ";
    for (int i = 0; 1 < 5; i++)
    {
     int value = rand % 10;
     st.Push(value);
     cout << value << " ";
    }

    cout « "видалити 2 елементи ";
    for (int i = 0; 1 < 2; i++)
    {
     if (Ist.IsEmpty())
     {
       cout « st2.top «
       st.Pop();
    }
    else
    {
      cout « "empty";
    }
  }

cout « "показати всі елементи";
while (Ist. IsEmpty())
   {
      cout << st2.top() << " ";
      st.Pop();
   }
return 0;
}








{
return real_count;
}

void PushBack(int value)
{
    if(!IsFull())
       data[real_count++] = value;
}

void PushFront(int value)
{
  if(!IsFull())
  {
    for (int 1 = real_count; 1 > 0; 1--)
        data[i] = data[i - 1];
    data[0] = value;
    real_count++;
  }
 }
int PopBack()
{
   if (!IsEmpty())
  {
     int last = data[real_count - 1];
    real_count--;
    return last;
  }
  else
  {
    throw "Queue is empty!";
  }
int PopFront()
{
  if (!IsEmpty())
  {




   {
    for (int i = real_count; i > o; i-)
         data[i] = data[i - 1];
    data[0] = value;
    real_count++;
   }
 }

int PopBack()
{
   if (!IsEmpty())
   {
      int last = data[real_count - 1];
      real_count--;
      return last;
   }
   else
   {
      throw "Queue is empty!";
   }
}

int PopFront()
{
  if (!IsEmpty())
  {
      int first = data[0];
      for(int i = 1; i < real_count; i++)
          data[i - 1] = data[i];

      real_count--;
      return first;
  }
  else
  {
      throw "Queue is empty!";





#include <vector>
#include ‹string>
using namespace std;

class Passport {
 private:
     string firstName;
     string lastName;
     string passportNumber;

public:
  Passport (string firstName, string lastName, string passportNumber)
     : firstName(firstName), lastName(lastName), passportNumber(passportNumber) {}

void Print() const {
     cout <<"Passport Information:" << endl;
     cout << "First Name: " << firstName << endl;
     cout << "Last Name: " << lastName << endl;
     cout << "Passport Number: " << passportnumber << endl;
  }
}
class ForeignPassport : public Passport {
private:
    vector<string> visas;
public:
      ForeignPassport(string firstName, string lastName, string passportNumber)
         : Passport(firstName, lastName, passportNumber) {}

      void Visa(const string& visa) {
           visas. push_back(visa);
      }
      void Print() const {
           Passport: :PrintO;
