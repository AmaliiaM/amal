#include 
"all_libraries.h"

class Human {

double height;

string eyes_color;
string name;
string

Last_name;
int energy;
bool soreThroat;
int cleanliness;
int mood;
int hunger;// 0 - full; 100 - hungry;
int* salaries_list;

public:

Human();
Human (double height, string eyes_color);
void SetHeight(double height);
double GetHeight() const;

void SetEyes_color(string eyes_color);
string GetEyes_color() const;

void SetName(string name);
string GetName() const;

void SetLastName(string last_name);
string GetLastName() const;

void SetEnergy(int energy);
int GetEnergy() const;

void SetSoreThroat (bool soreThroat);
bool GetSoreThroat() const;

void SetCleanliness(int cleanliness);
int GetCleanliness() const;

void SetMood(int mood);
int GetMood() const;

void SetHunger (int hunger);
int SetHunger() const;

void AddSalary(int);
int* GetSalary()_;


Human: : Human()
{
SetHeight(187);
SetEyes_color ("blue");
SetName("Sem");
SetLastName("Dep");
SetEnergy (10);
SetSoreThroat(0);
SetCleanliness (10);
SetMood (10) ;
SetHunger (10);
salaries_list = new int[12];
}



Human: : Human()
{
  cout <<"Object has been destroyed!\n";
  delete[] salaries_list;
}
void Human: : AddSalary(int salaries_list)
{
  // add 1 element to dynamic 1D-array
}
// think about state-safety
int* Human: :GetSalary()
{
return salaries_list;
}




public:
   /// <summary>
   /// method to set day of birth
   /// </ summary>
   /// <param name="day"></param>

   void
   SetDay(int day)
   {
     if (day > 0 && day <= 31) // TO DO: february 28-29, april june 30
    {
      this->day = day;
    }
    else
    {
     cout « "Invalid value!" « endl;
     throw "ERROR! \n" ;
    }
   }
    /// <summary>
    /// method to get the day of birth
    /// </summary>
    ///<returns>day</returns>
    int GetDay() const
   {
      return day;
   }
     ///<summary>
     /// method to set month of birth
     /// </ summary>
     /// <param name="month"></param>
void SetMonth(int month)


  /// <param name="month"></param>
  void SetMonth(int month)
  {
    if (month >= 1 && month <= 12)
    {
      this->month = month;
    }
    else
    {
      cout « "Invalid value!" « endl;
      throw "ERROR! \n";
     }
   }

     /// <summary>
     /// method to get the month of birth
     /// </summary>
     /// <returns>month</returns>
     int GetMonth() const
     {
       return month;
     }
     ///‹summary>
     ///method to set year of birth
     /// </summary>
     /// <param name="year"></param>
     void SetYear(int year)
    {
       this->year = year;
    }
     ///‹summary>
     /// method to get the year of birth
     /// </summary>
     ///<returns>year</returns>
    int GetYear) const
    {
      return year;
    }


  public:
    Student(): Student("Sam", "Dep", { 11, 9, 2001 }, { 4, 9, 2021 }){}

    Student(string name, string surname): Student("Sam", "Dep", { 11, 9, 2001 }, { 4, 9, 2021 }){}

    Student(string name, string surname, DateTime birthday, DateTime study_start)
    {
      SetName (name);
      SetSurname(surname);
      SetBirthday(birthday);
      SetStudyStart(study_start);
    }=



   // in which a SEPARATE NEW AREA OF MEMORY will be selected under all index fields
  Student(const Student& original)
   {
     cout << "student copy constructor \n";

     this->name = original.name;
     this->surname = original.surname;
     this->birthday = original.birthday;
     this-study_start = original.study_start;

   //an example of DEEP COPY
     this->hometask_rates_count = original.hometask_rates_count;
     this->practice_rates_count = original.practice_rates_count;
     this->exam_rates_count = original.exam_rates_count;

   //for pointer fields there will be a separate code that allocates new memory!!!!
     this->hometask_rates = new int[this->hometask_rates_count];
   // it is enough to allocate memory, and it is also necessary to initialize it!!!
     for (int i = 0; i < this->hometask_rates_count; i++)
     {
      this->hometask_rateslil = original.hometask_rates[il;
     }
   //for pointer fields there will be a separate code that allocates new memory!!!!
     this->practice_rates = new int[this->hometask_rates_count];
   // it is enough to allocate memory, and it is also necessary to initialize it!!!
     for (int i = 0; i < this-›practice_rates_count; i++)
     {
       this-›practice_rates[i] = original.practice_rates[i];
     }
   // for pointer fields there will be a separate code that allocates new memory!!!!
   this->exam_rates = new int[this->hometask_rates_count];
   // it is enough to allocate memory, and more is needed
  for (int i = 0; i < this->examrates_count; i++)
  {
   this->exam_ratesli] = original. exam_rates|il;
}
}





class Application {

private:
  static Application* instance;
  string title;

  Application()
  {
   title = "Title";
  }

public:
  static Application* GetInstance()
  {
   return instance;
  }

  void SetTitle(const string& title2)
  {
   title = title2;
  }
  void Random()
  {
   srand(time (NULL));
   int n = rand() % 100 + 1;
   cout << "Number:" << n << endl;
  }
  string GetTitle() const
  {
   return title;
  }
 }
