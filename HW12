#include <iostream>
using namespace std;

class DateTime {
    int day;
    int month;
    int year;

public:
    void SetDay(int day) {
        if (day > 0 && day <= 31) {
            this->day = day;
        } else {
            cout << "Invalid value!" << endl;
            throw "ERROR!\n";
        }
    }

    int GetDay() const {
        return day;
    }

    void SetMonth(int month) {
        if (month >= 1 && month <= 12) {
            this->month = month;
        } else {
            cout << "Invalid value!" << endl;
            throw "ERROR!\n";
        }
    }

    int GetMonth() const {
        return month;
    }

    void SetYear(int year) {
        this->year = year;
    }

    int GetYear() const {
        return year;
    }

    DateTime() {
        SetDay(11);
        SetMonth(10);
        SetYear(2023);
    }

    DateTime(int day, int month) {
        SetDay(day);
        SetMonth(month);
        SetYear(2023);
    }

    DateTime(int day, int month, int year) {
        SetDay(day);
        SetMonth(month);
        SetYear(year);
    }

    DateTime(const DateTime& original) {
        this->day = original.day;
        this->month = original.month;
        this->year = original.year;
    }

    ~DateTime() {
        // Destructor
    }

    void Print() const {
        cout << "Date: " << day << "." << month << "." << year << endl;
    }
};

class Student {
    string name;
    string surname;
    DateTime birthday;
    DateTime study_start;
    int* home_task_rates = nullptr;
    int home_task_rates_count = 0;
    int* practice_rates = nullptr;
    int practice_rates_count = 0;
    int* exam_rates = nullptr;
    int exam_rates_count = 0;

public:
    static int student_count;

    bool CountError() {
        return student_count <= 15;
    }

    void ThrowError() {
        try {
            if (CountError())
                student_count++;
            else
                throw 1;
        } catch (int) {
            cout << "Student counter overloaded" << endl;
        }
    }

    Student() {
        SetName("Amaliia");
        SetSurname("Manko");
        SetBirthday({9, 7, 2005});
        SetStudyStart({1, 9, 2022});
        ThrowError();
    }

    void PrintStudent() {
        cout << "Name: " << name << endl;
        cout << "Surname: " << surname << endl;
        cout << "Birthday: ";
        birthday.Print();
        cout << "Study start date";
        study_start.Print();
    }

    Student(const Student& original) {
        this->name = original.name;
        this->surname = original.surname;
        this->birthday = original.birthday;
        this->study_start = original.study_start;

        this->home_task_rates_count = original.home_task_rates_count;

        this->home_task_rates = new int[this->home_task_rates_count];

        for (int i = 0; i < this->home_task_rates_count; i++) {
            this->home_task_rates[i] = original.home_task_rates[i];
        }

        ThrowError();
    }

    ~Student() {
        if (home_task_rates != nullptr) {
            delete[] home_task_rates;
            home_task_rates = nullptr;
        }
    }

    void SetName(string name) {
        this->name = name;
    }

    string GetName() const {
        return name;
    }

private:
    void SetBirthday(const DateTime& birthday) {
        this->birthday = birthday;
    }

public:
    DateTime GetBirthday() const {
        return birthday;
    }

    void SetStudyStart(const DateTime& study_start) {
        this->study_start = study_start;
    }

    DateTime GetStudyStart() const {
        return study_start;
    }

    void SetSurname(string surname) {
        this->surname = surname;
    }

    string GetSurname() const {
        return surname;
    }

    void AddHomeTaskRate(unsigned int rate) {
        if (rate < 1 || rate > 12) {
            cout << "Incorrect value for parameter rate. Value must be from 1 to 12\n";
            throw "ERROR!";
        }

        if (home_task_rates_count == 0) {
            home_task_rates = new int[1];
            home_task_rates[0] = rate;
        } else {
            int* temp = new int[home_task_rates_count + 1];
            for (int i = 0; i < home_task_rates_count; i++)
                temp[i] = home_task_rates[i];
            temp[home_task_rates_count] = rate;
            delete[] home_task_rates;
            home_task_rates = temp;
        }
        home_task_rates_count++;
    }

    void PrintHomeTaskRates() const {
        cout << "Home tasks rates: ";
        for (int i = 0; i < home_task_rates_count; i++) {
            cout << home_task_rates[i] << ", ";
        }
        cout << "\n";
    }

    int GetHomeTaskRateByIndex(unsigned int index) {
        if (index >= home_task_rates_count) {
            cout << "Incorrect index when accessing the evaluation array\n";
            throw "ERROR!";
        }
        return home_task_rates[index];
    }

    int GetHomeTasksRatesCount() const {
        return home_task_rates_count;
    }

    void AddPracticeRate(int rate) {
        if (rate < 1 || rate > 12) {
            cout << "Incorrect value for parameter rate. Value must be from 1 to 12" << endl;
            throw "ERROR!";
        }

        if (practice_rates_count == 0) {
            cout << "Add first rate!" << endl;
            practice_rates = new int[1];
            practice_rates[0] = rate;
        } else {
            cout << "Add yet another rate" << endl;
            int* temp = new int[practice_rates_count + 1];
            for (int i = 0; i < practice_rates_count; i++) {
                temp[i] = practice_rates[i];
                temp[i + 1] = rate;
            }
            delete[] practice_rates;
            practice_rates = temp;
        }

        practice_rates_count++;
    }

    int GetPracticeRateByIndex(unsigned int index) {
        if (index >= practice_rates_count) {
            cout << "Incorrect index when accessing the evaluation array\n";
            throw "ERROR!";
        }
        return practice_rates[index];
    }

    int GetPracticeRatesCount() const {
        return practice_rates_count;
    }

    void AddExamRate(int rate) {
        if (rate < 1 || rate > 12) {
            cout << "Incorrect value for parameter rate. Value must be from 1 to 12" << endl;
            throw "ERROR!";
        }

        if (exam_rates_count == 0) {
            cout << "Add first rate!" << endl;
            exam_rates = new int[1];
            exam_rates[0] = rate;
        } else {
            cout << "Add yet another rate" << endl;
            int* temp = new int[exam_rates_count + 1];
            for (int i = 0; i < exam_rates_count; i++) {
                temp[i] = exam_rates[i];
                temp[i + 1] = rate;
            }
            delete[] exam_rates;
            exam_rates = temp;
        }

        exam_rates_count++;
    }

    int GetExamRatesCount() const {
        return exam_rates_count;
    }

    int GetExamRateByIndex(unsigned int index) {
        if (index >= exam_rates_count) {
            cout << "Incorrect index when accessing the evaluation array\n";
            throw "ERROR!";
        }
        return exam_rates[index];
    }

    void PrintPracticeRates() const {
        for (int i = 0; i < practice_rates_count; i++) {
            cout << "Practice Rate " << i + 1 << ": " << practice_rates[i] << endl;
        }
    }
};

class Group {
    Student* students;
    int group_size, course_number;
    string group_name, specialty;

public:
    static int group_count;

    bool CountError() {
        return group_count <= 15;
    }

    void ThrowError() {
        try {
            if (CountError())
                group_count++;
            else
                throw 1;
        } catch (int) {
            cout << "Group counter overloaded" << endl;
        }
    }

    Group() : Group(0) {
        ThrowError();
    }

    Group(int group_size) {
        this->group_size = group_size;
        course_number = 1;
        group_name = "KN-0";
        specialty = "Designer";
        students = new Student[group_size];
        ThrowError();
    }

    Group(const Group& obj) {
        this->students = new Student[obj.group_size];
        this->group_size = obj.group_size;
        this->course_number = obj.course_number;
        this->group_name = obj.group_name;
        this->specialty = obj.specialty;
        for (int i = 0; i < obj.group_size; i++)
            this->students[i] = obj.students[i];
        ThrowError();
    }

    void PrintGroup() {
        cout << "Group name: " << group_name << endl;
        cout << "Specialty: " << specialty << endl;
        int f;
        Student temp;
        for (int i = 1; i < group_size; i++) {
            f = 0;
            for (int r = 0; r < group_size - i; r++) {
                if (students[r].GetSurname() > students[r + 1].GetSurname()) {
                    temp = students[r];
                    students[r] = students[r + 1];
                    students[r + 1] = temp;
                    f = 1;
                }
            }
            if (f == 0) {
                break;
            }
        }
        for (int i = 0; i < group_size; i++) {
            cout << i + 1 << ' ' << students[i].GetSurname() << ' ' << students[i].GetName();
            cout << endl;
        }
    }

    int GetGroupSize() const {
        return group_size;
    }

    Student GetStudentByIndex(int index) const {
        return students[index];
    }

    void AddStudent(const Student& new_student) {
        Student* temp = new Student[group_size + 1];
        for (int i = 0; i < group_size; i++)
            temp[i] = students[i];

        temp[group_size] = new_student;

        delete[] students;
        students = temp;
        group_size++;
    }

    void MergeWithGroup(Group& another_group) {
        for (int i = 0; i < another_group.GetGroupSize(); i++) {
            this->AddStudent(another_group.GetStudentByIndex(i));
        }

        int k = another_group.GetGroupSize();
        for (int i = 0; i < k; i++) {
            another_group.DeleteTheWorstStudent();
        }
    }

    void TransferStudent(Group& other, int index) {
        if (index >= 0 && index < group_size) {
            other.AddStudent(students[index]);
            for (int i = index; i < group_size - 1; i++)
                students[i] = students[i + 1];
            group_size--;
        }
    }

    void DeleteFailedStudents() {
        int failed_exams = 0, new_size = 0;
        for (int i = 0; i < group_size; i++) {
            if (!(students[i].GetExamRateByIndex(i) > 4))  // Pass-grade is 4
                failed_exams++;
        }
        new_size = failed_exams;
        Student* temp = new Student[group_size + 1];
        for (int i = 0, j = 0; i < group_size; i++) {
            if (students[i].GetExamRateByIndex(i)) {
                temp[j] = students[i];
                j++;
            }
        }
        delete[] students;
        students = temp;
        group_size -= failed_exams;
    }

    void DeleteTheWorstStudent() {
        int worst = 0, temp1 = 0, first = 0, index = 0;
        Student* temp = new Student[group_size - 1];
        for (int i = 0; i < group_size; i++) {
            int grades_count = students[i].GetHomeTasksRatesCount();
            for (int j = 0; j < grades_count; i++)
                temp1 = students[i].GetHomeTaskRateByIndex(j);
            if (grades_count > 0 && first == 0) {
                worst = temp1 / grades_count;
                index = i;
            } else if (grades_count > 0 && first > 0) {
                worst = (temp1 / grades_count) < worst ? (temp1 / grades_count) : worst;
                index = i;
            }
            temp1 = 0;
            first++;
        }
        for (int i = 0; i < group_size; i++) {
            if (i < index)
                temp[i] = students[i];
            else if (i == index)
                continue;
            else
                temp[i - 1] = students[i];
        }
        delete[] students;
        students = temp;
    }
};

int Student::student_count = 0;
int Group::group_count = 0;

int main() {
    Student original;
    for (int i = 0; i < 20; i++) {
        Student();
    }
    Group one, two, three;
    //1
    one.PrintGroup();
    cout << endl;
    //2
    one.AddStudent(original);
    one.AddStudent(original);

    one.PrintGroup();
    cout << endl;

    //3
    two.AddStudent(original);
    one.TransferStudent(two, 0);
    cout << endl;
    one.PrintGroup();
    two.PrintGroup();
    cout << endl;

    return 0;
}
