#include <iostream>
#include <windows.h>
using namespace std;

class Vector {
    unsigned int size = 0;
    unsigned int capacity = 10;
    int* data = nullptr;

public:
    Vector() : Vector(10) {}

    Vector(unsigned int capacity) {
        if (capacity < 10) {
            capacity = 10;
        }
        this->capacity = capacity;
        data = new int[capacity];
    }

    Vector(const Vector& other) {
        size = other.size;
        capacity = other.capacity;
        data = new int[capacity];

        for (unsigned int i = 0; i < size; ++i) {
            data[i] = other.data[i];
        }
    }

    ~Vector() {
        if (data != nullptr) {
            delete[] data;
            data = nullptr;
        }
    }

private:
    void ensureCapacity() {
        if (size < capacity) {
            return;
        }

        capacity *= 2;

        int* temp = new int[capacity];
        for (int i = 0; i < size; i++) {
            temp[i] = data[i];
        }
        delete[] data;
        data = temp;
    }

    void quickSortDesc(int low, int high) {
        if (low < high) {
            int index = partitionDesc(low, high);
            quickSortDesc(low, index - 1);
            quickSortDesc(index + 1, high);
        }
    }

    int partitionDesc(int low, int high) {
        int pivot = data[high];
        int i = low - 1;

        for (int j = low; j <= high - 1; j++) {
            if (data[j] >= pivot) {
                i++;
                swap(data[i], data[j]);
            }
        }

        swap(data[i + 1], data[high]);
        return i + 1;
    }

    void swap(int& a, int& b) {
        int temp = a;
        a = b;
        b = temp;
    }

public:

    unsigned int getSize() const {
        return size;
    }

    unsigned int getCapacity() const {
        return capacity;
    }

    void insert(int value, unsigned int index) {
        if (index > size) {
            cout << "Error!!\n";
            throw;
        }
        ensureCapacity();
        for (unsigned int i = size; i > index; i--) {
            data[i] = data[i - 1];
        }
        data[index] = value;
        size++;
    }

    void removeByIndex(unsigned int index) {
        if (index >= size) {
            cout << "Error!!\n";
        }
        for (unsigned int i = index; i < size - 1; i++) {
            data[i] = data[i + 1];
        }
        size--;
    }

    void removeByValue(int value) {
        unsigned int index = 0;
        while (index < size) {
            if (data[index] == value) {
                for (unsigned int i = index; i < size - 1; i++) {
                    data[i] = data[i + 1];
                }
                size--;
            } else {
                index++;
            }
        }
    }

    void popFront() {
        if (size == 0) {
            cout << "Error!!\n";
            throw;
        }
        for (unsigned int i = 0; i < size - 1; i++) {
            data[i] = data[i + 1];
        }
        size--;
    }

    void popBack() {
        if (size == 0) {
            cout << "Error!!\n";
            throw;
        }
        size--;
    }

    void pushBack(int value) {
        ensureCapacity();
        data[size] = value;
        size++;
    }

    void pushFront(int value) {
        ensureCapacity();
        for (int i = size; i > 0; i--) {
            data[i] = data[i - 1];
        }
        data[0] = value;
        size++;
    }

    void clear() {
        size = 0;
    }

    bool isEmpty() const {
        return size == 0;
    }

    void print() const {
        if (isEmpty()) {
            cout << "Vector is empty.\n";
            return;
        }

        for (int i = 0; i < size; i++) {
            cout << data[i] << " ";
        }
        cout << "\n";
    }

    int lastIndexOf(int value) const {
        for (int i = size - 1; i >= 0; --i) {
            if (data[i] == value) {
                return i;
            }
        }
        return -1;
    }

    void sortDesc() {
        quickSortDesc(0, size - 1);
    }

    void shuffle() {
        if (size <= 1) {
            return;
        }

        srand(static_cast<unsigned int>(time(nullptr)));

        for (int i = size - 1; i > 0; --i) {
            int j = rand() % (i + 1);
            swap(data[i], data[j]);
        }
    }

    void randomFill() {
        for (int i = 0; i < 5; i++) {
            pushBack(rand() % 100);
        }
    }

    int getElementAt(unsigned int index) const {
        if (index < size) {
            return data[index];
        } else {
            cout << "Index out of bounds!\n";
        }
    }

    Vector& operator=(const Vector& other) {
        if (this != &other) {
            delete[] data;

            size = other.size;
            capacity = other.capacity;

            data = new int[capacity];

            for (unsigned int i = 0; i < size; ++i) {
                data[i] = other.data[i];
            }
        }
        return *this;
    }

    int& operator[](unsigned int index) {
        if (index < size) {
            return data[index];
        } else {
            cout << "Index out of bounds!\n";
        }
    }

    bool operator==(const Vector& other) const {
        if (size != other.size) {
            return false;
        }

        for (unsigned int i = 0; i < size; ++i) {
            if (data[i] != other.data[i]) {
                return false;
            }
        }

        return true;
    }

    friend istream& operator>>(istream& input, Vector& vec);

    friend ostream& operator<<(ostream& output, const Vector& vec);
};

istream& operator>>(istream& input, Vector& vec) {
    input >> vec.size;

    vec.data = new int[vec.size];

    for (unsigned int i = 0; i < vec.size; ++i) {
        input >> vec.data[i];
    }

    return input;
}

ostream& operator<<(ostream& output, const Vector& vec) {
    for (unsigned int i = 0; i < vec.size; ++i) {
        output << vec.data[i] << " ";
    }

    return output;
}

int main() {
    Vector vec;

    srand(time(0));

    for (int i = 0; i < 10; i++) {
        vec.pushBack(rand() % 100);
        Sleep(15);
    }
    vec.print();

    vec.removeByIndex(0);
    vec.print();
    cout << endl;

    vec.popFront();
    vec.print();
    cout << endl;

    vec.insert(52, 3);
    vec.print();
    cout << endl;

    vec.popBack();
    vec.print();
    cout << endl;

    vec.removeByValue(76);
    vec.print();
    cout << endl;
}
